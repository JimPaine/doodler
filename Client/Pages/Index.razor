@page "/"
@using System.Text.Json;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="container h-100">
    <div class="row h-100">
        <div id="canvaswrapper" class="col-md-12 h-75" @ref="wrapper">
            <canvas id="doodlepad" class="border p-0 m-0"
                @onmousedown="OnMouseDown"
                @onmousemove="OnMouseMove"
                @onmouseup="OnMouseUp"
                @onmouseout="OnMouseOut"
                @ref="canvas">
            </canvas>
        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private ElementReference canvas;    
    private ElementReference wrapper;
    private CanvasInterop canvasInterop;

    protected override async Task OnParametersSetAsync()
    {
        this.canvasInterop = new CanvasInterop(JsRuntime, canvas, wrapper);
        await this.canvasInterop.SetSize(); 
    }

    protected override async Task OnInitializedAsync()
    {
        this.hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/doodleHub"))
            .Build();

        this.hubConnection.On<Payload>("ReceivePayload", async (payload) =>
        {
            await this.canvasInterop.DrawLine(payload);
            StateHasChanged();
        });

        await this.hubConnection.StartAsync();
    }

    public bool IsConnected => this.hubConnection.State == HubConnectionState.Connected;

    private bool draw = false;
    private double x;
    private double y;

    private async Task OnMouseDown(MouseEventArgs eventArgs)
    {
        this.draw = true;        

        Point point = await this.canvasInterop.GetOffset(eventArgs.ClientX, eventArgs.ClientY);
        this.x = point.x;
        this.y = point.y;

        Console.WriteLine($"x = {this.x} y = {this.y}");
    } 
    private void OnMouseUp(MouseEventArgs eventArgs) => this.draw = false;
    private void OnMouseOut(MouseEventArgs eventArgs) => this.draw = false;

    private async Task OnMouseMove(MouseEventArgs eventArgs)
    {
        if(draw)
        {
            Point point = await this.canvasInterop.GetOffset(eventArgs.ClientX, eventArgs.ClientY);

            Console.WriteLine($"x = {this.x} y = {this.y} newX = {point.x} newY = {point.y}");

            Payload payload = new Payload 
            { 
                PrevX = this.x, 
                NewX = point.x,
                PrevY = this.y,
                NewY = point.y
            };

            this.x = point.x;
            this.y = point.y;

            await this.canvasInterop.DrawLine(payload);
            await this.hubConnection.SendAsync("SendPayload", payload);            
        }

        await Task.CompletedTask;        
    }
}